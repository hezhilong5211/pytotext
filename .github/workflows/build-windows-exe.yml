name: Build Windows EXE

on:
  # 手动触发
  workflow_dispatch:
  # 或者在push到main分支时自动触发
  # push:
  #   branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: 安装Playwright浏览器
      run: |
        python -m playwright install chromium
      shell: cmd
    
    - name: 查看Playwright浏览器路径
      run: |
        Get-ChildItem "$env:USERPROFILE\AppData\Local\ms-playwright" -Recurse | Where-Object {$_.Name -like "*chromium*"} | Select-Object FullName
      shell: powershell
    
    - name: 打包单文件版（带管理员权限）
      run: |
        echo "=== Building single-file version with admin rights ==="
        pyinstaller build_exe.spec --clean --log-level INFO
      shell: cmd
      continue-on-error: false
    
    - name: 重命名单文件版
      run: |
        if (Test-Path "dist\链接提取工具.exe") {
          Rename-Item "dist\链接提取工具.exe" "链接提取工具_单文件版_管理员权限.exe"
          Write-Host "Single-file version renamed successfully"
        }
      shell: pwsh
    
    - name: 打包单目录版（无需管理员权限）
      run: |
        echo "=== Building single-directory version without admin rights ==="
        pyinstaller build_exe_onedir.spec --clean --log-level INFO
      shell: cmd
      continue-on-error: false
    
    - name: 打包单目录版为ZIP
      run: |
        if (Test-Path "dist\链接提取工具") {
          Compress-Archive -Path "dist\链接提取工具" -DestinationPath "dist\链接提取工具_单目录版_无需管理员权限.zip"
          Write-Host "Single-directory version zipped successfully"
        }
      shell: pwsh
    
    - name: 检查打包结果和浏览器
      run: |
        Write-Host "=== Checking dist directory ==="
        if (Test-Path dist) { 
          Get-ChildItem dist -Recurse | Select-Object Name, Length 
        } else {
          Write-Host "ERROR: dist directory not found!"
        }
        
        Write-Host ""
        Write-Host "=== Searching for .exe files ==="
        Get-ChildItem . -Recurse -File -Filter "*.exe" -ErrorAction SilentlyContinue | Select-Object FullName, Length
        
        Write-Host ""
        Write-Host "=== Checking if browser is packaged in single-file version ==="
        if (Test-Path "dist\链接提取工具_单文件版_管理员权限.exe") {
          $exeSize = (Get-Item "dist\链接提取工具_单文件版_管理员权限.exe").Length / 1MB
          Write-Host "EXE size: $([math]::Round($exeSize, 2)) MB"
          if ($exeSize -gt 100) {
            Write-Host "[OK] Browser appears to be included (size > 100MB)"
          } else {
            Write-Host "[WARNING] Browser might NOT be included (size < 100MB)"
          }
        }
        
        Write-Host ""
        Write-Host "=== Checking if browser is in single-directory version ==="
        if (Test-Path "dist\链接提取工具\playwright_browsers") {
          Write-Host "[OK] playwright_browsers folder found in single-directory version"
          Get-ChildItem "dist\链接提取工具\playwright_browsers" -Recurse -Directory | Select-Object FullName
        } else {
          Write-Host "[WARNING] playwright_browsers folder NOT found"
        }
      shell: pwsh
    
    - name: 上传两个版本
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: 链接提取工具-Windows-两个版本
        path: |
          dist/*.exe
          dist/*.zip
        retention-days: 30
        if-no-files-found: warn
    
    - name: 创建Release（可选）
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*.exe
          dist/*.zip
          权限问题解决方案.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

